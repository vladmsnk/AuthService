// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "auth/vladmsnk/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// FindUserUserByEmail mocks base method.
func (m *MockAuthRepo) FindUserUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserUserByEmail indicates an expected call of FindUserUserByEmail.
func (mr *MockAuthRepoMockRecorder) FindUserUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserUserByEmail", reflect.TypeOf((*MockAuthRepo)(nil).FindUserUserByEmail), ctx, email)
}

// FindUserUserByUsernameAndPassword mocks base method.
func (m *MockAuthRepo) FindUserUserByUsernameAndPassword(ctx context.Context, username, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserUserByUsernameAndPassword", ctx, username, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserUserByUsernameAndPassword indicates an expected call of FindUserUserByUsernameAndPassword.
func (mr *MockAuthRepoMockRecorder) FindUserUserByUsernameAndPassword(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserUserByUsernameAndPassword", reflect.TypeOf((*MockAuthRepo)(nil).FindUserUserByUsernameAndPassword), ctx, username, password)
}

// SaveUser mocks base method.
func (m *MockAuthRepo) SaveUser(ctx context.Context, user *entity.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockAuthRepoMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockAuthRepo)(nil).SaveUser), ctx, user)
}
